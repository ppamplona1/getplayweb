/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pt.uc.dei.aor.projeto3.grupod.ejb;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import static java.util.Calendar.YEAR;
import java.util.GregorianCalendar;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.servlet.http.Part;
import pt.uc.dei.aor.projeto3.grupod.entities.Music;
import pt.uc.dei.aor.projeto3.grupod.entities.UserPlay;
import pt.uc.dei.aor.projeto3.grupod.exceptions.ReleaseYearInvalidException;
import pt.uc.dei.aor.projeto3.grupod.facades.MusicFacade;



/**
 *
 * @author User
 */
@Stateless
public class MusicEJB {

    // Add business logic below. (Right-click in editor and choose
    // "Insert Code > Add Business Method")
    @EJB
    private MusicFacade mf;
    
    private String path;
    private File destination;

    /**
     *
     * @return
     */
    public MusicFacade getMf() {
        return mf;
    }

    /**
     *
     * @param mf
     */
    public void setMf(MusicFacade mf) {
        this.mf = mf;
    }

    /**
     *
     * @return
     */
    public String getPath() {
        return path;
    }

    /**
     *
     * @param path
     */
    public void setPath(String path) {
        this.path = path;
    }

    /**
     *
     * @return
     */
    public File getDestination() {
        return destination;
    }

    /**
     *
     * @param destination
     */
    public void setDestination(File destination) {
        this.destination = destination;
    }
    
    /**
     *
     * @param m
     * @return
     */
    public Music newMusic(Music m){
        
        m.setPath(path);
        
        try {
            mf.create(m);
            return m;

        } 
        catch (Exception e) {
            return null;

        }
    }
    
    /**
     *
     * @return
     */
    public static String getMusicFolder() {
        String currentDir = new File(".").getAbsolutePath();
        currentDir = currentDir.substring(0, currentDir.length()-1);
        return currentDir +"music/";
    }

    /**
     *
     * @param file
     * @param m
     * @param u
     * @return
     * @throws IOException
     */
    public String upload(Part file, Music m, UserPlay u) throws IOException{
        
        m.setUser(u);
        
        String fileName = m.getTitle()+"_"+m.getArtist()+"_"+ m.getAlbum()+"_"+m.getUser().getUserID()+".mp3";
        
        destination = new File(getMusicFolder() + fileName);
        
        try (InputStream inputStream = file.getInputStream(); 
                FileOutputStream outputStream = new FileOutputStream(destination)) {
            
            byte[] buffer = new byte[4096];
            int bytesRead = 0;
            while(true) {
                bytesRead = inputStream.read(buffer);
                if(bytesRead > 0) {
                    outputStream.write(buffer, 0, bytesRead);
                }else {
                    break;
                }
            }
        }
        path = fileName;
        return path;
        
    }
    
    /**
     *
     * @param year
     * @return
     * @throws ReleaseYearInvalidException
     */
    public int validateYear(String year) throws ReleaseYearInvalidException{
        
        int y = -1;
        try {
            y = Integer.parseInt(year);
        } catch (NumberFormatException e) {
            throw new ReleaseYearInvalidException(e);
            
        }
        
        int thisYear = new GregorianCalendar().get(YEAR);
        if (y<1900 || y>thisYear){
            throw new ReleaseYearInvalidException();
        }
        System.out.println(y);
        return y;
        
    }
    
}
