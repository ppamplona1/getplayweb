/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.uc.dei.aor.projeto3.grupod.managedBeans;

import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.enterprise.context.RequestScoped;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.Part;
import pt.uc.dei.aor.projeto3.grupod.ejb.LogedUserEJB;
import pt.uc.dei.aor.projeto3.grupod.ejb.MusicEJB;
import pt.uc.dei.aor.projeto3.grupod.entities.Music;
import pt.uc.dei.aor.projeto3.grupod.exceptions.ReleaseYearInvalidException;
import pt.uc.dei.aor.projeto3.grupod.exceptions.NotMp3Exception;

/**
 *
 * @author User
 */
@Named
@RequestScoped
public class MusicController {

    private Music music;

    @Inject
    private LogedUserEJB logedUserEJB;

    private Part file;
    private String isMP3ErrorMessage = "";
    private String year;
    private String yearInvalid = "";

    @Inject
    private MusicEJB musicEJB;

    private List<Music> musicResultsOfTheUserLoged;

    /**
     * Creates a new instance of MusicController
     */
    public MusicController() {
    }

    @PostConstruct
    public void init() {
        if (music == null) {
            music = new Music();
        }
    }

    public Music getMusic() {
        return music;
    }

    public void setMusic(Music music) {
        this.music = music;
    }

    public LogedUserEJB getLogedUserEJB() {
        return logedUserEJB;
    }

    public void setLogedUserEJB(LogedUserEJB logedUserEJB) {
        this.logedUserEJB = logedUserEJB;
    }

    public Part getFile() {
        return file;
    }

    public void setFile(Part file) {
        this.file = file;
    }

    public String getIsMP3ErrorMessage() {
        return isMP3ErrorMessage;
    }

    public void setIsMP3ErrorMessage(String isMP3ErrorMessage) {
        this.isMP3ErrorMessage = isMP3ErrorMessage;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public String getYearInvalid() {
        return yearInvalid;
    }

    public void setYearInvalid(String yearInvalid) {
        this.yearInvalid = yearInvalid;
    }

    public List<Music> getMusicResultsOfTheUserLoged() {
        return musicEJB.myMusicsList();
    }

    public void setMusicResultsOfTheUserLoged(List<Music> musicResultsOfTheUserLoged) {
        this.musicResultsOfTheUserLoged = musicResultsOfTheUserLoged;
    }

    /**
     *
     * method to validate the part file uploaded
     *
     * @throws NotMp3Exception
     *
     */
    public void isMP3() throws NotMp3Exception {
        if (!"audio/mpeg".equals(file.getContentType()) & !"audio/mp3".equals(file.getContentType())) {
            Exception ex = new NotMp3Exception();

            throw new NotMp3Exception();
        }

    }

    /**
     * method for validating the releaseYear of the new music.
     *
     * @throws ReleaseYearInvalidException
     *
     */
    public int verifyYear() throws ReleaseYearInvalidException {

        try {

            return musicEJB.validateYear(year);

        } catch (ReleaseYearInvalidException e) {

            throw new ReleaseYearInvalidException();

        }

    }

    /**
     * persists the new music to the database
     *
     * @return the myMusics page if the creation of the new music is successful
     *
     */
    public String newMusic() {

        try {
            music.setReleaseYEAR(verifyYear());
            isMP3();
            music.setPath(musicEJB.upload(file, music, logedUserEJB.getUser()));
            musicEJB.newMusic(music);
        } catch (ReleaseYearInvalidException e) {
            yearInvalid = e.getLocalizedMessage();
            java.util.logging.Logger.getLogger(MusicController.class.getName()).log(Level.SEVERE, null, e);
            return "newMusic";
        } catch (NotMp3Exception e) {
            isMP3ErrorMessage = e.getMessage();
            java.util.logging.Logger.getLogger(MusicController.class.getName()).log(Level.SEVERE, null, e);
            return "newMusic";
        } catch (Exception ex) {
            Logger.getLogger(MusicController.class.getName()).log(Level.SEVERE, null, ex);
            return "newMusic";
        }
        
        return "myMusics";

    }

    public String deleteSong(Music song) {
        return musicEJB.deleteSong(song);
    }

}
