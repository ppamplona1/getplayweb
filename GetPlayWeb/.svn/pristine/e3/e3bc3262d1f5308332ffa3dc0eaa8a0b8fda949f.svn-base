
package pt.uc.dei.aor.projeto3.grupod.managedBeans;


import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.inject.Inject;
import pt.uc.dei.aor.projeto3.grupod.ejb.LogedUserEJB;
import pt.uc.dei.aor.projeto3.grupod.ejb.PlaylistEJB;
import pt.uc.dei.aor.projeto3.grupod.entities.Playlist;
import pt.uc.dei.aor.projeto3.grupod.exceptions.PlaylistNameException;
import pt.uc.dei.aor.projeto3.grupod.facades.PlaylistFacade;

@ManagedBean
@RequestScoped
public class PlaylistController {

    @Inject
    private LogedUserEJB logedUserEJB;
    
    @EJB
    private PlaylistEJB playlistEJB;
    
    @EJB
    private PlaylistFacade playlistFacade;
    
    private Playlist playlist;
    private List<Playlist> listOfPlaylists;
    private String messageError;
    
    public PlaylistController() {
    }
    
    @PostConstruct
    public void init() {
        playlist = new Playlist();
    }

    public LogedUserEJB getLogedUserEJB() {
        return logedUserEJB;
    }

    public void setLogedUserEJB(LogedUserEJB logedUserEJB) {
        this.logedUserEJB = logedUserEJB;
    }

    public PlaylistEJB getPlaylistEJB() {
        return playlistEJB;
    }

    public void setPlaylistEJB(PlaylistEJB playlistEJB) {
        this.playlistEJB = playlistEJB;
    }

    public Playlist getPlaylist() {
        return playlist;
    }

    public void setPlaylist(Playlist playlist) {
        this.playlist = playlist;
    }

    public List<Playlist> getListOfPlaylists() {
        return playlistEJB.getListMyPlaylists();
    }

    public void setListOfPlaylists(List<Playlist> listOfPlaylists) {
        this.listOfPlaylists = listOfPlaylists;
    }
    
    public String getMessageError() {
        return messageError = playlistEJB.getMessageError();
    }

    public void setMessageError(String messageError) {
        this.messageError = messageError;
    }
    
    
    
    
    public String newPlaylist() {
        
        GregorianCalendar gc = new GregorianCalendar();
        playlist.setCreationDate(gc.getTime());
        playlist.setUser(logedUserEJB.getUser());

        String result = playlistEJB.newPlaylist(playlist);
        
        return result;
    }
    
    
    
    public String delete(Playlist p) {
        playlistFacade.remove(p);
        return "myPlaylists";
    }
    
    
    public String goToPlaylist(int a, Playlist p) {
        if (a == 1) {
            playlist = p;
            playlistEJB.setPlaylist(p);
            return "editPlaylist";
        } else {
            
            playlistEJB.seePlaylist(p);
            return "onePlaylist";
        }
    }
    
    public String sortByOrderName(int a) {

        List<Playlist> results = playlistFacade.findAllPlaylistsByUserIDName(a);
        listOfPlaylists = results;
        return "myPlaylists";
    }

    public String sortByOrderDate(int a) {

        List<Playlist> results = playlistFacade.findAllPlaylistsByUserIDDate(a);
        listOfPlaylists = results;
        return "myPlaylists";
    }

    public String sortByOrderSize(int a) {
        List<Playlist> results = playlistFacade.findAllPlaylistsByUserID();
        if (a == 1) {
            Collections.sort(results);
        } else {
            Collections.sort(results, new Playlist.OrderBySizeDesc());
        }

        listOfPlaylists = results;
        
        return "myPlaylists";
    }
    
    
    public String edit() {
        try {
            playlistFacade.searchPlaylist(playlist);
        } catch (PlaylistNameException ex) {
            Logger.getLogger(EditPlaylistManagedBean.class.getName()).log(Level.SEVERE, null, ex);
            messageError = ex.getMessage();
            return "editPlaylist";
        }
        
        playlistFacade.edit(playlist);
        return "myPlaylists";
    }
    
}
