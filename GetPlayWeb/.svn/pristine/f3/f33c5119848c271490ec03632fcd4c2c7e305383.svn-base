/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.uc.dei.aor.projeto3.grupod.managedBeans;


import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;
import javax.mail.MessagingException;
import javax.mail.Part;
import pt.uc.dei.aor.projeto3.grupod.ejb.CreateMusicSessionBean;
import pt.uc.dei.aor.projeto3.grupod.entities.Music;
import pt.uc.dei.aor.projeto3.grupod.facades.MusicFacade;

/**
 *
 * @author brunocosta
 */
@ManagedBean(name = "CreateMusicManagedBean")
@SessionScoped
public class CreateMusicManagedBean implements Serializable {

    private static final long serialVersionUID = -5288336572529686555L;

    @EJB
    private MusicFacade musicFacade;

    @ManagedProperty(value = "#{logedUserManagedBean}")
    private LogedUserManagedBean logedUserMB;

    @EJB
    private CreateMusicSessionBean cmsb;

    private Part file;

    private String path;
    private Music song;

    public CreateMusicSessionBean getCmsb() {
        return cmsb;
    }

    public void setCmsb(CreateMusicSessionBean cmsb) {
        this.cmsb = cmsb;
    }

    @PostConstruct
    public void init() {
        song = new Music();
        path = "";
    }

    /**
     * Creates a new instance of MusicManagedBean
     */
    public CreateMusicManagedBean() {

    }

    public Part getFile() {
        return file;
    }

    public void setFile(Part file) {
        this.file = file;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public MusicFacade getMusicFacade() {
        return musicFacade;
    }

    public void setMusicFacade(MusicFacade musicFacade) {
        this.musicFacade = musicFacade;
    }

    public LogedUserManagedBean getLogedUserMB() {
        return logedUserMB;
    }

    public void setLogedUserMB(LogedUserManagedBean logedUserMB) {
        this.logedUserMB = logedUserMB;
    }

    

    public Music getSong() {
        return song;
    }

    public void setSong(Music song) {
        this.song = song;
    }

    public void validateFile(FacesContext ctx,
            UIComponent comp,
            Object value) throws MessagingException {
        List<FacesMessage> msgs = new ArrayList<FacesMessage>();
        if (file != null) {
            if (file.getSize() == 0) {
                msgs.add(new FacesMessage("You didn't choose a file"));
            }
            if (file.getSize() > 1024) {
                msgs.add(new FacesMessage("file too big"));
            }
            if (!"audio/mpeg".equals(file.getContentType())) {
                msgs.add(new FacesMessage("not a text file"));
            }
            if (!msgs.isEmpty()) {
                throw new ValidatorException(msgs);
            }
        }
    }

    public String newMusic() throws MessagingException {
        
        cmsb.upload(file, path);
       
        song.setPath(path);

        Music music = cmsb.newMusic(song, this.logedUserMB.getUserLoged());
        if (music != null) {
            return "mainWindow";
        } else {
            return "newMusic";
        }

    }

}
