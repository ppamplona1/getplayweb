/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.uc.dei.aor.projeto3.grupod.managedBeans;


import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.SessionScoped;
import javax.faces.model.DataModel;
import pt.uc.dei.aor.projeto3.grupod.ejb.CreateMusicSessionBean;
import pt.uc.dei.aor.projeto3.grupod.ejb.MusicPlaylistSessionBean;
import pt.uc.dei.aor.projeto3.grupod.ejb.MusicSessionBean;
import pt.uc.dei.aor.projeto3.grupod.entities.Music;
import pt.uc.dei.aor.projeto3.grupod.entities.Playlist;
import pt.uc.dei.aor.projeto3.grupod.exceptions.ReleaseYearInvalidException;
import pt.uc.dei.aor.projeto3.grupod.facades.MusicFacade;

/**
 *
 * @author User
 */
@ManagedBean(name = "MusicManagerBean")
@RequestScoped
public class MusicManagerBean implements Serializable {

    private static final long serialVersionUID = (long) -1361707633847843773L;

    private Music music;
    private List<Music> songs;
    
    private String yearInvalid;
    
    private String year;

    @EJB
    private MusicFacade musicFacade;
    
    @EJB
    private CreateMusicSessionBean createMusicB;

    @ManagedProperty(value = "#{logedUserManagedBean}")
    private LogedUserManagedBean logedUserMB;
    

    @EJB
    private MusicSessionBean msb;

    @EJB
    private MusicPlaylistSessionBean mpsb;

    private DataModel<Music> resultadosALLmusics;

    private DataModel<Music> resultadosMymusics;

    @ManagedProperty(value = "#{playlistManagedBean}")
    private PlaylistManagedBean plMB;

    private String errorCopyingtoPlaylist;
    
    private List<Playlist> myPlaylists;
    
    private String selectedItem;

    public MusicManagerBean() {

    }

    @PostConstruct
    public void init() {
        myPlaylists = new ArrayList();
        msb.setLogedUserMB(logedUserMB);
        this.resultadosALLmusics = msb.getResultadosALLmusics();
        errorCopyingtoPlaylist = "";
        yearInvalid = "";
        
        
    }

    public String getYearInvalid() {
        return yearInvalid;
    }

    public void setYearInvalid(String yearInvalid) {
        this.yearInvalid = yearInvalid;
    }

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public CreateMusicSessionBean getCreateMusicB() {
        return createMusicB;
    }

    public void setCreateMusicB(CreateMusicSessionBean createMusicB) {
        this.createMusicB = createMusicB;
    }
    
    
    
    public String getErrorCopyingtoPlaylist() {
        errorCopyingtoPlaylist = this.mpsb.getError();
        mpsb.setError("");
        return errorCopyingtoPlaylist;
    }

    public void setErrorCopyingtoPlaylist(String errorCopyingtoPlaylist) {
        this.errorCopyingtoPlaylist = errorCopyingtoPlaylist;
    }

    public MusicSessionBean getMsb() {
        msb.setLogedUserMB(logedUserMB);
        return msb;
    }

    public void setMsb(MusicSessionBean msb) {
        this.msb = msb;
    }

    

    public Music getMusic() {
        
        return music;
    }

    public void setMusic(Music music) {
        this.music = music;
    }

    public List<Music> getSongs() {
        return songs;
    }

    public void setSongs(List<Music> songs) {
        this.songs = songs;
    }

    public MusicFacade getMusicFacade() {
        return musicFacade;
    }

    public void setMusicFacade(MusicFacade musicFacade) {
        this.musicFacade = musicFacade;
    }

    public LogedUserManagedBean getLogedUserMB() {
        return logedUserMB;
    }

    public void setLogedUserMB(LogedUserManagedBean logedUserMB) {
        this.logedUserMB = logedUserMB;
    }

    public DataModel<Music> getResultadosALLmusics() {

        return resultadosALLmusics;
    }

    public void setResultadosALLmusics(DataModel<Music> resultadosALLmusics) {
        this.resultadosALLmusics = resultadosALLmusics;
    }

    public DataModel<Music> getResultadosMymusics() {
        msb.setLogedUserMB(logedUserMB);
        resultadosMymusics = this.msb.getResultadosMymusics();
        return resultadosMymusics;
    }

    

    public List<Playlist> getMyPlaylists() {

        this.mpsb.setU(this.logedUserMB.getUserLoged());
        myPlaylists = this.mpsb.getList();

        return myPlaylists;
    }

    public PlaylistManagedBean getPlMB() {
        return plMB;
    }

    public void setPlMB(PlaylistManagedBean plMB) {
        this.plMB = plMB;
    }

    public void setMyPlaylists(List<Playlist> myPlaylists) {
        this.myPlaylists = myPlaylists;
    }



    public String copyToplaylist(int a) {
        Music m;
        if(a == 1 || a == 3){
            m = (Music) resultadosALLmusics.getRowData();}
            
        else{
            m = (Music) resultadosMymusics.getRowData();
        }
            this.mpsb.setU(logedUserMB.getUserLoged());
            return mpsb.copyToplaylistAllMusics(m, selectedItem, a);

    }

    public String getSelectedItem() {

        return selectedItem;
    }

    public void setSelectedItem(String selectedItem) {
        this.selectedItem = selectedItem;
    }

    public void setResultadosMymusics(DataModel<Music> resultadosMymusics) {
        this.resultadosMymusics = resultadosMymusics;
    }

    public String deleteSong() {
        return this.msb.deleteSong();
    }

    public String edit() {
        
        try {
              verifyYear();
                
            } catch (ReleaseYearInvalidException ex) {
                
                yearInvalid = ex.getMessage();
                System.out.println(yearInvalid);
                
                java.util.logging.Logger.getLogger(MusicManagerBean.class.getName()).log(Level.SEVERE, null, ex);
                return "editMusic";
            }
        return this.msb.editMusic(music);
        
        
        
    }
    
    public String gotToeditMusic() {
        
        music = (Music) resultadosMymusics.getRowData();
        
        
        return "editMusic";
    }
    
    
    public void verifyYear() throws ReleaseYearInvalidException{
        
        
        try{
            
        music.setReleaseYEAR(createMusicB.validateYear(year));
        
        }
        catch(ReleaseYearInvalidException e){
            
            throw new ReleaseYearInvalidException();
            
        }
        
    }
    
}
