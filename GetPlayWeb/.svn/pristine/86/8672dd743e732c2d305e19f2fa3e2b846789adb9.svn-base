package pt.uc.dei.aor.projeto3.grupod.managedBeans;

import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.enterprise.context.RequestScoped;
import javax.faces.bean.ViewScoped;

import javax.inject.Inject;
import javax.inject.Named;
import pt.uc.dei.aor.projeto3.grupod.ejb.ActiveObjectsEJB;
import pt.uc.dei.aor.projeto3.grupod.entities.Music;

import pt.uc.dei.aor.projeto3.grupod.entities.Playlist;
import pt.uc.dei.aor.projeto3.grupod.exceptions.PlaylistNameException;
import pt.uc.dei.aor.projeto3.grupod.facades.PlaylistFacade;

@Named
@RequestScoped
public class PlaylistController {

    @Inject
    private ActiveObjectsEJB activeObjectsEJB;

    @Inject
    private PlaylistFacade playlistFacade;

    private List<Playlist> listOfPlaylists;
    private String messageError;

    private Playlist activePlaylist;
    private Playlist selectedPlaylist;
    private Playlist thePlaylistByID;

    private long playlistID;

    private long musicID;

    public PlaylistController() {
    }

    @PostConstruct
    public void init() {

        activePlaylist = new Playlist();

    }

    public Playlist getThePlaylistByID() {

        playlistFacade.findPlaylistsByID(playlistID);

        return thePlaylistByID;
    }

    public void setThePlaylistByID(Playlist thePlaylistByID) {
        this.thePlaylistByID = thePlaylistByID;
    }

    public long getMusicID() {
        return musicID;
    }

    public void setMusicID(long musicID) {
        this.musicID = musicID;
    }

    public PlaylistFacade getPlaylistFacade() {

        return playlistFacade;
    }

    public void setPlaylistFacade(PlaylistFacade playlistFacade) {
        this.playlistFacade = playlistFacade;
    }

    public ActiveObjectsEJB getActiveObjectsEJB() {
        return activeObjectsEJB;
    }

    public void setActiveObjectsEJB(ActiveObjectsEJB activeObjectsEJB) {
        this.activeObjectsEJB = activeObjectsEJB;
    }

    public Playlist getActivePlaylist() {
        if (activePlaylist == null) {

        }
        return activePlaylist;
    }

    public void setActivePlaylist(Playlist activePlaylist) {
        this.activePlaylist = activePlaylist;
    }

    public Playlist getSelectedPlaylist() {
        return selectedPlaylist;
    }

    public void setSelectedPlaylist(Playlist selectedPlaylist) {
        this.selectedPlaylist = selectedPlaylist;
    }

    public long getPlaylistID() {
        return playlistID;
    }

    public void setPlaylistID(long playlistID) {
        this.playlistID = playlistID;
    }

    public List<Playlist> getListOfPlaylists() {

        listOfPlaylists = playlistFacade.listPlaylist(activeObjectsEJB.getUser());

        return listOfPlaylists;
    }

    public void setListOfPlaylists(List<Playlist> listOfPlaylists) {
        this.listOfPlaylists = listOfPlaylists;
    }

    public String getMessageError() {
        return messageError = playlistFacade.getMessageError();
    }

    public void setMessageError(String messageError) {
        this.messageError = messageError;
    }

    /**
     * Creates a new Playlist
     *
     * @return The String that leads to a XHTML window
     */
    public String newPlaylist() {

        GregorianCalendar gc = new GregorianCalendar();
        activePlaylist.setCreationDate(gc.getTime());
        activePlaylist.setUser(activeObjectsEJB.getUser());

        String result = playlistFacade.newPlaylist(activePlaylist);
        return result;
    }

    /**
     * Delete a playlist
     *
     * @param p
     * @return The String that leads to a XHTML window
     */
    public String delete() {
        playlistFacade.deletePlaylist(selectedPlaylist);
        return "myPlaylists";
    }

    public String goToEditPlaylist(Playlist p) {

        activePlaylist = p;
        playlistID = p.getPlaylistID();
        return "editPlaylist";

    }

    public String openPlaylist(Playlist p) {
        activePlaylist = p;
        playlistID = p.getPlaylistID();
        thePlaylistByID = p;
        return "onePlaylist";
    }

    public String sortByOrderName(int a) {

        listOfPlaylists = playlistFacade.findAllPlaylistsByUserIDName(a, activeObjectsEJB.getUser());
        return "myPlaylists";
    }

    public String sortByOrderDate(int a) {

        listOfPlaylists = playlistFacade.findAllPlaylistsByUserIDDate(a, activeObjectsEJB.getUser());
        return "myPlaylists";
    }

    public String sortByOrderSize(int a) {
        listOfPlaylists = playlistFacade.findAllPlaylistsByUserID(activeObjectsEJB.getUser());
        if (a == 1) {
            Collections.sort(listOfPlaylists);
        } else {
            Collections.sort(listOfPlaylists, new Playlist.OrderBySizeDesc());
        }

        return "myPlaylists";
    }

    public String edit() {

        try {
            playlistFacade.searchPlaylist(activePlaylist);
        } catch (PlaylistNameException ex) {
            Logger.getLogger(PlaylistController.class.getName()).log(Level.SEVERE, null, ex);
            messageError = ex.getMessage();
            return "editPlaylist";
        }
        Playlist play = playlistFacade.findPlaylistsByID(playlistID);
        play.setName(activePlaylist.getName());
        playlistFacade.edit(play);

        return "myPlaylists";
    }

    public void removeMusicFromPlaylist(Music m) {
        thePlaylistByID = playlistFacade.findPlaylistsByID(playlistID);
        thePlaylistByID.getSongs().remove(m);
        playlistFacade.edit(thePlaylistByID);

    }

}
