/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.uc.dei.aor.projeto3.grupod.managedBeans;

import com.sun.istack.logging.Logger;
import java.io.IOException;
import java.io.Serializable;
import java.util.logging.Level;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import javax.faces.bean.SessionScoped;
import javax.mail.MessagingException;
import javax.servlet.http.Part;
import pt.uc.dei.aor.projeto3.grupod.ejb.CreateMusicSessionBean;
import pt.uc.dei.aor.projeto3.grupod.ejb.MusicSessionBean;
import pt.uc.dei.aor.projeto3.grupod.entities.Music;
import pt.uc.dei.aor.projeto3.grupod.exceptions.ReleaseYearInvalidException;
import pt.uc.dei.aor.projeto3.grupod.exceptions.NotMp3Exception;

/**
 *
 * @author brunocosta
 */
@ManagedBean
@RequestScoped
public class CreateMusicManagedBean implements Serializable {

    @EJB
    private CreateMusicSessionBean createMusicB;

    @EJB
    private MusicSessionBean musicB;

    @ManagedProperty(value = "#{logedUserManagedBean}")
    private LogedUserManagedBean logedUserMB;

    private Music music;
    private Part file;
    private String isMP3 = "";
    private String year;
    private String yearInvalid = "";

    public String getYear() {
        return year;
    }

    public void setYear(String year) {
        this.year = year;
    }

    public String getYearInvalid() {
        return yearInvalid;
    }

    public void setYearInvalid(String yearInvalid) {
        this.yearInvalid = yearInvalid;
    }

    
    
    public CreateMusicManagedBean() {
        this.music = new Music();
    }

    public Music getMusic() {
        return music;
    }

    public void setMusic(Music music) {
        this.music = music;
    }

    public LogedUserManagedBean getLogedUserMB() {
        return logedUserMB;
    }

    public void setLogedUserMB(LogedUserManagedBean logedUserMB) {
        this.logedUserMB = logedUserMB;
    }

    public CreateMusicSessionBean getCreateMusicB() {
        return createMusicB;
    }

    public void setCreateMusicB(CreateMusicSessionBean createMusicB) {
        this.createMusicB = createMusicB;
    }

    public MusicSessionBean getMusicB() {
        return musicB;
    }

    public void setMusicB(MusicSessionBean musicB) {
        this.musicB = musicB;
    }

    public Part getFile() {
        return file;
    }

    public void setFile(Part file) {
        this.file = file;
    }

    public String getIsMP3() {
        return isMP3;
    }

    public void setIsMP3(String isMP3) {
        this.isMP3 = isMP3;
    }

    public boolean isMP3() {
        return ("audio/mpeg".equals(file.getContentType()) || "audio/mp3".equals(file.getContentType()));
    }

    public String newMusic() throws MessagingException, IOException {

        try {
            
            try {
                verifyYear();
            } catch (ReleaseYearInvalidException ex) {
                this.yearInvalid = ex.getMessage();
                java.util.logging.Logger.getLogger(CreateMusicManagedBean.class.getName()).log(Level.SEVERE, null, ex);
                return "newMusic";
            }
            
            if (!isMP3()) {
                throw new NotMp3Exception();
            }
            
            createMusicB.upload(this.file, this.music, this.logedUserMB.getUserLoged());
            
            Music newMusic = createMusicB.newMusic(this.music);

            this.isMP3 = "";

            if (newMusic != null) {
                return "mainWindow";
            } else {
                return "newMusic";
            }

        } catch (NotMp3Exception ex) {
            this.isMP3 = ex.getMessage();
            Logger.getLogger(CreateMusicManagedBean.class).severe("Erro uploading file from User.", ex);
            return "newMusic";
        }

    }
    
    public void verifyYear() throws ReleaseYearInvalidException{
        
        
        try{
            
        music.setReleaseYEAR(createMusicB.validateYear(year));
        
        }
        catch(ReleaseYearInvalidException e){
            
            throw new ReleaseYearInvalidException();
            
        }
        
    }
}
