/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.uc.dei.aor.projeto3.grupod.ejb;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import static java.util.Calendar.YEAR;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.faces.model.ArrayDataModel;
import javax.faces.model.DataModel;
import javax.inject.Inject;
import javax.servlet.http.Part;
import pt.uc.dei.aor.projeto3.grupod.entities.Music;
import pt.uc.dei.aor.projeto3.grupod.entities.UserPlay;
import pt.uc.dei.aor.projeto3.grupod.exceptions.ReleaseYearInvalidException;
import pt.uc.dei.aor.projeto3.grupod.facades.MusicFacade;

/**
 *
 * @author User
 */
@Stateless
public class MusicEJB {

    // Add business logic below. (Right-click in editor and choose
    // "Insert Code > Add Business Method")
    @EJB
    private MusicFacade musicFacade;

    private String path;
    private File destination;

    @Inject
    private LogedUserEJB logedUser;

    @EJB
    private Playlist
    /**
     *
     * @return
     */
    public MusicFacade getMusicFacade() {
        return musicFacade;
    }

    /**
     *
     * @param musicFacade
     */
    public void setMusicFacade(MusicFacade musicFacade) {
        this.musicFacade = musicFacade;
    }

    /**
     *
     * @return
     */
    public String getPath() {
        return path;
    }

    /**
     *
     * @param path
     */
    public void setPath(String path) {
        this.path = path;
    }

    /**
     *
     * @return
     */
    public File getDestination() {
        return destination;
    }

    /**
     *
     * @param destination
     */
    public void setDestination(File destination) {
        this.destination = destination;
    }

    /**
     *
     * @param m
     * @return
     * 
     */
    public Music newMusic(Music m) {


        musicFacade.create(m);
        return m;

    }

    /**
     *
     * @return the path of the folder where the the music is saved
     */
    public static String getMusicFolder() {
        String currentDir = new File(".").getAbsolutePath();
        currentDir = currentDir.substring(0, currentDir.length() - 1);
        return currentDir + "music/";
    }

    /**
     * method to upload the music file to the server
     *
     * @param file
     * @param m
     * @param u
     * @return the path of the uploaded file
     * @throws IOException
     */
    public String upload(Part file, Music m) {

        String fileName = m.getTitle() + "_" + m.getArtist() + "_" + m.getAlbum() + "_" + m.getUser().getUserID() + ".mp3";

        destination = new File(getMusicFolder() + fileName);

        try (InputStream inputStream = file.getInputStream();
                FileOutputStream outputStream = new FileOutputStream(destination)) {

            byte[] buffer = new byte[4096];
            int bytesRead = 0;
            while (true) {
                bytesRead = inputStream.read(buffer);
                if (bytesRead > 0) {
                    outputStream.write(buffer, 0, bytesRead);
                } else {
                    break;
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(MusicEJB.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }
        path = fileName;
      

        return path;

    }

    /**
     * method to validate the releaseYear of the music the user is uploading
     *
     * @param year
     * @return the integer year
     * @throws ReleaseYearInvalidException
     */
    public int validateYear(String year) throws ReleaseYearInvalidException {
        if (year.isEmpty()) {
            throw new ReleaseYearInvalidException();
        }
        int y = -1;
        try {
            y = Integer.parseInt(year);
        } catch (NumberFormatException e) {
            throw new ReleaseYearInvalidException(e);

        }

        int thisYear = new GregorianCalendar().get(YEAR);
        if (y < 1900 || y > thisYear) {
            throw new ReleaseYearInvalidException();
        }

        return y;

    }

    public List<Music> myMusicsList() {

        return musicFacade.findAllMusicByUserID(logedUser.getUser());

    }

    public String deleteSong(Music music) throws Exception {

        if (music.getUser().getUserID() == logedUser.getUser().getUserID()) {
            try {
                musicFacade.remove(music);
            } catch (Exception e) {
                throw new Exception();
            }

        }
        return "myMusics";
    }
    
    public String editMusic(Music music) {
        this.musicFacade.edit(music);
        return "myMusics";
    }
}
